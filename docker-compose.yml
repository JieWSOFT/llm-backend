services:
  db:
    image: postgres:12
    restart: always
    network_mode: host
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}

  prestart:
    # image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    build:
      context: ./backend
    network_mode: host
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
        restart: true
    command: bash scripts/prestart.sh
  backend:
    # image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    build:
      context: ./backend
    restart: always
    network_mode: host
    volumes:
      - bakend-logs:/backend/log
    depends_on:
      db:
        condition: service_healthy
        restart: true
      prestart:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      ENVIRONMENT: production
      BASE_URL: ${BASE_URL?Variable not set}
      MODEL: ${MODEL?Variable not set}
      API_KEY: ${API_KEY?Variable not set}
volumes:
  app-db-data:
  bakend-logs: